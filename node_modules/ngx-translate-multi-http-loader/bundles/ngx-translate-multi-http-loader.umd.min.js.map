{
  "version": 3,
  "file": "ngx-translate-multi-http-loader.umd.min.js",
  "sources": [
    "ng://ngx-translate-multi-http-loader/projects/ngx-translate/multi-http-loader/src/lib/multi-http-loader.ts"
  ],
  "sourcesContent": [
    "import {HttpClient} from \"@angular/common/http\";\nimport {TranslateLoader} from \"@ngx-translate/core\";\nimport {Observable, forkJoin, of} from \"rxjs\";\nimport {catchError, map} from \"rxjs/operators\";\nimport merge from 'deepmerge';\n\n\nexport interface ITranslationResource {\n  prefix: string;\n  suffix: string;\n}\n\nexport class MultiTranslateHttpLoader implements TranslateLoader {\n  constructor(\n    private http: HttpClient,\n    private resources: ITranslationResource[],\n  ) {}\n\n  public getTranslation(lang: string): Observable<any> {\n    const requests = this.resources.map(resource => {\n      const path = resource.prefix + lang + resource.suffix;\n      return this.http.get(path).pipe(catchError(res => {\n        console.error(\"Could not find translation file:\", path);\n        return of({});\n      }));\n    });\n    return forkJoin(requests).pipe(map(response => merge.all(response)));\n  }\n}\n"
  ],
  "names": [
    "MultiTranslateHttpLoader",
    "http",
    "resources",
    "this",
    "prototype",
    "getTranslation",
    "lang",
    "_this",
    "requests",
    "map",
    "resource",
    "path",
    "prefix",
    "suffix",
    "get",
    "pipe",
    "catchError",
    "res",
    "console",
    "error",
    "of"
  ],
  "mappings": "obAEA,IAUAA,EAAA,WACE,SAAAA,EAAFC,EAAAC,GACYC,KAAZF,KAAYA,EACAE,KAAZD,UAAYA,SAGHF,EAATI,UAAAC,eAAA,SAAAC,GACI,IAAJC,EAAAJ,KACAK,EAAAL,KAAAD,UAAAO,IAAA,SAAAC,GACM,IAAqBC,EAA3BD,EAAAE,OAAoDN,EAApDI,EAAAG,OACA,OAAAN,EAAAN,KAAsBa,IAAtBH,GAAAI,KAAAC,EAAAA,WAAA,SAA0DC,GAEhD,OADFC,QAARC,MAAsB,mCAAtBR,GACAS,EAAAA,GAAA,2EAZA"
}
