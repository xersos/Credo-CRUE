(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators'), require('deepmerge')) :
    typeof define === 'function' && define.amd ? define('ngx-translate-multi-http-loader', ['exports', 'rxjs', 'rxjs/operators', 'deepmerge'], factory) :
    (factory((global['ngx-translate-multi-http-loader'] = {}),null,global.Rx.Observable.prototype,null));
}(this, (function (exports,rxjs,operators,merge) { 'use strict';

    merge = merge && merge.hasOwnProperty('default') ? merge['default'] : merge;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MultiTranslateHttpLoader = (function () {
        /**
         * @param {?} http
         * @param {?} resources
         */
        function MultiTranslateHttpLoader(http, resources) {
            this.http = http;
            this.resources = resources;
        }
        /**
         * @param {?} lang
         * @return {?}
         */
        MultiTranslateHttpLoader.prototype.getTranslation = function (lang) {
            var _this = this;
            var /** @type {?} */ requests = this.resources.map(function (resource) {
                var /** @type {?} */ path = resource.prefix + lang + resource.suffix;
                return _this.http.get(path).pipe(operators.catchError(function (res) {
                    console.error("Could not find translation file:", path);
                    return rxjs.of({});
                }));
            });
            return rxjs.forkJoin(requests).pipe(operators.map(function (response) { return merge.all(response); }));
        };
        return MultiTranslateHttpLoader;
    }());

    exports.MultiTranslateHttpLoader = MultiTranslateHttpLoader;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-translate-multi-http-loader.umd.js.map
