/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { forkJoin, of } from "rxjs";
import { catchError, map } from "rxjs/operators";
import merge from 'deepmerge';
/**
 * @record
 */
export function ITranslationResource() { }
function ITranslationResource_tsickle_Closure_declarations() {
    /** @type {?} */
    ITranslationResource.prototype.prefix;
    /** @type {?} */
    ITranslationResource.prototype.suffix;
}
var MultiTranslateHttpLoader = /** @class */ (function () {
    /**
     * @param {?} http
     * @param {?} resources
     */
    function MultiTranslateHttpLoader(http, resources) {
        this.http = http;
        this.resources = resources;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    MultiTranslateHttpLoader.prototype.getTranslation = function (lang) {
        var _this = this;
        var /** @type {?} */ requests = this.resources.map(function (resource) {
            var /** @type {?} */ path = resource.prefix + lang + resource.suffix;
            return _this.http.get(path).pipe(catchError(function (res) {
                console.error("Could not find translation file:", path);
                return of({});
            }));
        });
        return forkJoin(requests).pipe(map(function (response) { return merge.all(response); }));
    };
    return MultiTranslateHttpLoader;
}());
export { MultiTranslateHttpLoader };
function MultiTranslateHttpLoader_tsickle_Closure_declarations() {
    /** @type {?} */
    MultiTranslateHttpLoader.prototype.http;
    /** @type {?} */
    MultiTranslateHttpLoader.prototype.resources;
}
//# sourceMappingURL=multi-http-loader.js.map
