{
  "version": 3,
  "file": "multi-http-loader.js",
  "sources": [
    "ng://ngx-translate-multi-http-loader/projects/ngx-translate/multi-http-loader/src/lib/multi-http-loader.ts"
  ],
  "sourcesContent": [
    "import {HttpClient} from \"@angular/common/http\";\nimport {TranslateLoader} from \"@ngx-translate/core\";\nimport {Observable, forkJoin, of} from \"rxjs\";\nimport {catchError, map} from \"rxjs/operators\";\nimport merge from 'deepmerge';\n\n\nexport interface ITranslationResource {\n  prefix: string;\n  suffix: string;\n}\n\nexport class MultiTranslateHttpLoader implements TranslateLoader {\n  constructor(\n    private http: HttpClient,\n    private resources: ITranslationResource[],\n  ) {}\n\n  public getTranslation(lang: string): Observable<any> {\n    const requests = this.resources.map(resource => {\n      const path = resource.prefix + lang + resource.suffix;\n      return this.http.get(path).pipe(catchError(res => {\n        console.error(\"Could not find translation file:\", path);\n        return of({});\n      }));\n    });\n    return forkJoin(requests).pipe(map(response => merge.all(response)));\n  }\n}\n"
  ],
  "names": [],
  "mappings": ";;;;AAEA,OAAO,EAAa,QAAQ,EAAE,EAAE,EAAC,MAAM,MAAM,CAAC;AAC9C,OAAO,EAAC,UAAU,EAAE,GAAG,EAAC,MAAM,gBAAgB,CAAC;AAC/C,OAAO,KAAK,MAAM,WAAW,CAAC;;;;;;;;;;;AAQ9B,MAAM;;;;;IACJ,YACU,MACA;QADA,SAAI,GAAJ,IAAI;QACJ,cAAS,GAAT,SAAS;KACf;;;;;IAEG,cAAc,CAAC,IAAY;QAChC,uBAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAC7C,uBAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,GAAG,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBAC/C,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,IAAI,CAAC,CAAC;gBACxD,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACf,CAAC,CAAC,CAAC;SACL,CAAC,CAAC;QACH,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;CAExE"
}
